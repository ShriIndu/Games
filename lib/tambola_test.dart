
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:math';
import 'package:flutter_tts/flutter_tts.dart';

class TambolaPage extends StatefulWidget {
  const TambolaPage({super.key});

  @override
  State<TambolaPage> createState() => _TambolaPageState();
}

class _TambolaPageState extends State<TambolaPage> with WidgetsBindingObserver {
  int generatedNumber = 0;
  List<int> highlightedNumbers = [];
  FlutterTts flutterTts = FlutterTts();
  bool isGenerateButtonActive = true;
  bool isAutoGenerateEnabled = false;
  bool isPlaying = false;
  bool areButtonsDisabled = false;
  double autoGenerateDelay = 3.0;
  bool isVolumeOn = true;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    configureTts();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    flutterTts.stop();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.paused ||
        state == AppLifecycleState.inactive) {
      stopAutoGeneration();
      flutterTts.stop();
    } else if (state == AppLifecycleState.resumed) {
      if (isAutoGenerateEnabled) {
        startAutoGeneration();
      }
    }
  }

//audio style
  void configureTts() async {
    await flutterTts.setLanguage("en-US");
    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.5);
    await flutterTts.awaitSpeakCompletion(true);
  }

  void announceNumber(int number) {
    if (isVolumeOn) {
      flutterTts.speak(number.toString());
    }
  }

  void generateRandomNumber() async {
    if (!isGenerateButtonActive || (!isAutoGenerateEnabled && isPlaying))
      return;

    setState(() {
      isGenerateButtonActive = false;
    });

    Random random = Random();
    int newNumber;

    do {
      newNumber = random.nextInt(90) + 1;
    } while (highlightedNumbers.contains(newNumber));

    setState(() {
      generatedNumber = newNumber;
      highlightedNumbers.add(newNumber);
    });

    announceNumber(generatedNumber);
    print('Generated Number: $generatedNumber');

    if (highlightedNumbers.length == 90) {
      Future.delayed(const Duration(milliseconds: 1500), () {
        _showAllNumbersCalledDialog();
      });
    } else {
      Future.delayed(
          Duration(
              seconds: isAutoGenerateEnabled ? autoGenerateDelay.round() : 2),
          () {
        setState(() {
          isGenerateButtonActive = true;
        });

        if (isAutoGenerateEnabled && isPlaying) {
          generateRandomNumber();
        }
      });
    }
  }

  void toggleVolume() {
    setState(() {
      isVolumeOn = !isVolumeOn;
      if (!isVolumeOn) {
        flutterTts.stop();
      }
    });
  }

  void _showAllNumbersCalledDialog() {
    showDialog(
      barrierDismissible: false,
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('All Numbers Called!'),
          content: const Text(
              'Congratulations! All numbers have been called. What would you like to do?'),
          actions: [
            TextButton(
              onPressed: () {
                resetGame();
                Navigator.of(context).pop();
              },
              child: const Text('Reset Game'),
            ),
            //button disable afer close
            TextButton(
              onPressed: () {
                setState(() {
                  areButtonsDisabled = true;
                });
                Navigator.of(context).pop();
              },
              child: const Text('Close'),
            ),
          ],
        );
      },
    );
  }

  void _showNumbersCalledListDialog() {
    showDialog(
      barrierDismissible: false,
      context: context,
      builder: (BuildContext context) {
        List<Widget> numberWidgets = highlightedNumbers.isEmpty
            ? [const Text('No number called...')]
            : highlightedNumbers.map((number) {
                return Container(
                  height: 33,
                  width: 33,
                  margin: const EdgeInsets.all(4.0),
                  decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.transparent,
                      border: Border.all(color: Colors.black)),
                  child: Center(
                    child: Text(
                      number.toString(),
                      style: const TextStyle(
                        fontSize: 16,
                        color: Colors.black,
                      ),
                    ),
                  ),
                );
              }).toList();

        return AlertDialog(
          title: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'History',
                style: TextStyle(fontSize: 22),
              ),
              GestureDetector(
                onTap: () async {
                  Navigator.pop(context);
                },
                child: Container(
                  height: 30,
                  width: 30,
                  decoration: BoxDecoration(
                    color: Colors.transparent,
                    borderRadius: BorderRadius.circular(30),
                    //  border: Border.all(color: Colors.black),
                  ),
                  child: const Center(
                    child: Icon(
                      Icons.close,
                      color: Colors.black,
                      size: 25,
                    ),
                  ),
                ),
              ),
            ],
          ),
          content: SizedBox(
            width: double.maxFinite, // Make the content width flexible
            child: Wrap(
              alignment: WrapAlignment.center, // Center the circles
              children: numberWidgets,
            ),
          ),
          // actions: [
          //   TextButton(
          //     onPressed: () {
          //       resetGame();
          //       Navigator.of(context).pop();
          //     },
          //     child: const Text('Reset Game'),
          //   ),
          //   TextButton(
          //     onPressed: () {
          //       Navigator.of(context).pop();
          //     },
          //     child: const Text('Close'),
          //   ),
          // ],
        );
      },
    );
  }

  void resetGame() {
    setState(() {
      generatedNumber = 0;
      highlightedNumbers.clear();
      isPlaying = false;
      isAutoGenerateEnabled = false;
      isGenerateButtonActive = true;
      areButtonsDisabled = false;
    });
  }

  void startAutoGeneration() {
    setState(() {
      isPlaying = true;
    });
    generateRandomNumber();
  }

  void stopAutoGeneration() {
    setState(() {
      isPlaying = false;
    });
  }

  void toggleAutoGeneration() {
    if (isPlaying) {
      stopAutoGeneration();
    } else {
      startAutoGeneration();
    }
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.black,
        statusBarIconBrightness: Brightness.light,
        systemNavigationBarColor: Colors.black,
        systemNavigationBarIconBrightness: Brightness.light,
      ),
    );
    return Scaffold(
      body: Column(
        children: [
          //SizedBox(height: 40),
          Padding(
            padding: const EdgeInsets.only(
              left: 10,
              right: 10,
              // top: 50,
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () async {
                    Navigator.pop(context);
                  },
                  child: Card(
                    elevation: 10,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(40),
                    ),
                    child: Container(
                      height: 40,
                      width: 40,
                      padding: const EdgeInsets.only(left: 8),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: const Center(
                        child: Icon(
                          Icons.arrow_back_ios,
                          color: Colors.black,
                          size: 25,
                        ),
                      ),
                    ),
                  ),
                ),

                Padding(
                  padding: const EdgeInsets.only(top: 50),
                  child: Container(
                    height: 100,
                    width: 100,
                    decoration: BoxDecoration(
                      color: const Color.fromARGB(255, 248, 241, 174),
                      borderRadius: BorderRadius.circular(20),
                      border:
                          Border.all(color: const Color(0xFFA388EE), width: 2),
                    ),
                    child: Center(
                      child: Text(
                        '$generatedNumber',
                        style: const TextStyle(
                          fontSize: 40,
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ),
                ),
                //  ),
                // const SizedBox(width: 90),

                Card(
                  elevation: 10,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(40),
                  ),
                  child: Container(
                    height: 40,
                    width: 40,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Center(
                      child: IconButton(
                        onPressed: toggleVolume,
                        icon: Icon(
                          isVolumeOn
                              ? Icons.volume_up
                              : Icons.volume_off, // Toggle icon
                        ),
                        color: Colors.black,
                        iconSize: 25,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 25),
          Expanded(
            child: GridView.builder(
              padding: const EdgeInsets.only(left: 20, right: 20),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 10,
                childAspectRatio: 0.8,
              ),
              itemCount: 90,
              itemBuilder: (context, index) {
                int currentNumber = index + 1;
                Color boxColor;
                if (currentNumber == generatedNumber) {
                  boxColor = const Color(0xFFFFB2EF);
                } else if (highlightedNumbers.contains(currentNumber)) {
                  boxColor = const Color(0xFFA388EE);
                } else {
                  boxColor = const Color.fromARGB(255, 248, 241, 174);
                }

                return Container(
                  decoration: BoxDecoration(
                      color: Colors.transparent,
                      border: Border.all(color: Colors.grey, width: 0.5)),
                  child: Padding(
                    padding: const EdgeInsets.all(2.0),
                    child: Container(
                      decoration: BoxDecoration(
                        color: boxColor,
                        shape: BoxShape.circle,
                      ),
                      child: Center(
                        child: Text(
                          '$currentNumber',
                          style: const TextStyle(fontSize: 14),
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Padding(
            padding: EdgeInsets.only(
              left: MediaQuery.of(context).devicePixelRatio > 3 ? 10 : 23,
              right: MediaQuery.of(context).devicePixelRatio > 3 ? 10 : 30,
              // top: 20,
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Expanded(
                  flex: 2,
                  child: Text(
                    'Break : ${autoGenerateDelay.round()}s',
                    style: TextStyle(fontSize: 18, color: Colors.black),
                  ),
                ),
                //SizedBox(width: 1),
                Expanded(
                  flex: 5,
                  child: Slider(
                    value: autoGenerateDelay,
                    min: 3,
                    max: 10,
                    divisions: 7,
                    label: '${autoGenerateDelay.round()}s',
                    onChanged: (value) {
                      setState(() {
                        autoGenerateDelay = value;
                      });
                    },
                  ),
                ),
              ],
            ),
          ),

          if (!isAutoGenerateEnabled) ...[
            Center(
              child: GestureDetector(
                onTap: (isGenerateButtonActive && !areButtonsDisabled)
                    ? generateRandomNumber
                    : null,
                child: Image.asset(
                  'assets/play_edit.png',
                  width: 100,
                  height: 100,
                ),
              ),
            ),
          ] else ...[
            Center(
              child: GestureDetector(
                  onTap: areButtonsDisabled ? null : toggleAutoGeneration,
                  child: Image.asset(
                    isPlaying
                        ? 'assets/pause-button_edit.png'
                        : 'assets/play_edit.png',
                    width: 100,
                    height: 100,
                  )),
            ),
          ],
          const SizedBox(height: 20),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Column(children: [
                  Transform.scale(
                    scale: 1.3,
                    child: Switch(
                      value: isAutoGenerateEnabled,
                      onChanged: (value) {
                        setState(() {
                          isAutoGenerateEnabled = value;
                          if (!value) {
                            stopAutoGeneration();
                          }
                        });
                      },
                      activeColor: const Color(0xFFA388EE),
                      inactiveThumbColor: Colors.white,
                    ),
                  ),
                  const SizedBox(width: 2),
                  const Text(
                    'Auto',
                    style: TextStyle(color: Colors.black, fontSize: 16),
                  ),
                ]),
                Column(
                  children: [
                    Container(
                      height: 40,
                      width: 45,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(10),
                        color: Colors.transparent,
                        border: Border.all(color: Colors.black, width: 2),
                      ),
                      child: Center(
                        child: GestureDetector(
                          onTap: resetGame,
                          child: const Icon(
                            Icons.refresh,
                            color: Colors.black,
                            size: 30,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 2),
                    const Text(
                      'Restart',
                      style: TextStyle(color: Colors.black, fontSize: 16),
                    ),
                  ],
                ),
                Column(children: [
                  Container(
                    height: 40,
                    width: 45,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.transparent,
                      border: Border.all(color: Colors.black, width: 2),
                    ),
                    child: Center(
                      child: GestureDetector(
                        onTap: () {
                          if (isPlaying) {
                            stopAutoGeneration();
                          }
                          _showNumbersCalledListDialog();
                        },
                        child: const Icon(
                          Icons.book,
                          color: Colors.black,
                          size: 30,
                        ),
                      ),
                    ),
                  ),
                  const Text(
                    'History',
                    style: TextStyle(color: Colors.black, fontSize: 16),
                  ),
                ]),
              ],
            ),
          ),

          const SizedBox(height: 10),
        ],
      ),
    );
  }

  Widget buildCustomButton(String text, VoidCallback? onPressed) {
    return GestureDetector(
      onTap: onPressed != null ? onPressed : () {},
      child: Container(
        // height: 50,
        padding: const EdgeInsets.symmetric(
          horizontal: 20,
          vertical: 10,
        ),
        decoration: BoxDecoration(
          color: const Color(0xFFA388EE),
          borderRadius: BorderRadius.circular(30),
          border: Border.all(
            color: Colors.black,
          ),
          boxShadow: [
            BoxShadow(
              color: Theme.of(context).shadowColor,
              spreadRadius: 1,
              offset: const Offset(2, 3),
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              text,
              style: const TextStyle(
                color: Colors.black,
                fontWeight: FontWeight.w500,
                fontSize: 16,
              ),
            ),
          ],
        ),
      ),
    );
  }
}


//slot//
// class MyHomePage extends StatefulWidget {
//   const MyHomePage({super.key});

//   @override
//   State<MyHomePage> createState() => _MyHomePageState();
// }

// class _MyHomePageState extends State<MyHomePage> {
//   late ConfettiController _confettiController;
//   final AudioPlayer _confettiAudioPlayer = AudioPlayer();
//   final AudioPlayer _audioPlayer = AudioPlayer();
//   var targets = List<int?>.filled(3, null);
//   var tempTargets = List<int?>.filled(3, 6);
//   final Random _random = Random();
//   bool _isRolling = false;
//   bool _isConfettiRunning = false;

//   @override
//   void initState() {
//     super.initState();
//     _confettiController =
//         ConfettiController(duration: const Duration(seconds: 5));
//   }

//   @override
//   void dispose() {
//     _audioPlayer.dispose();
//     _confettiController.dispose();
//     _confettiAudioPlayer.dispose();
//     super.dispose();
//   }

//   Future<void> _startRolling() async {
//     setState(() {
//       _isRolling = true;

//       tempTargets = List<int?>.filled(3, null);
//     });

//     await _audioPlayer.play(
//       AssetSource('happy-loop-6978.mp3'),
//       volume: 1.0,
//     );
//     // int generatedNumber = _random.nextInt(9) + 1;
//     for (int i = 0; i < 3; i++) {
//       await Future.delayed(const Duration(milliseconds: 1500), () {
//         setState(() {
//           tempTargets[i] = _random.nextInt(9) + 1;
//           //tempTargets[i] = generatedNumber;
//         });
//       });
//     }

//     await Future.delayed(const Duration(seconds: 2), () {
//       setState(() {
//         targets = List.from(tempTargets);
//         _isRolling = false;
//         print("Results: ${targets.join(', ')}");

//         if (targets.every((element) => element == targets[0])) {
//           _isConfettiRunning = true;
//           _confettiController.play();
//           _confettiAudioPlayer.play(
//             AssetSource('mixkit-cheering-crowd-loud-whistle-610.wav'),
//             volume: 1.0,
//           );
//           Future.delayed(const Duration(seconds: 7), () {
//             setState(() {
//               _confettiAudioPlayer.stop();
//               _isConfettiRunning = false;
//             });
//           });
//         }
//       });
//     });

//     _audioPlayer.stop();
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         toolbarHeight: 80,
//         automaticallyImplyLeading: false,
//         backgroundColor: Colors.white,
//         title: Row(children: [
//           GestureDetector(
//             onTap: () async {
//               Navigator.pop(context);
//             },
//             child: Card(
//               elevation: 10,
//               shape: RoundedRectangleBorder(
//                 borderRadius: BorderRadius.circular(40),
//               ),
//               child: Container(
//                 height: 38,
//                 width: 38,
//                 padding: const EdgeInsets.only(left: 8),
//                 decoration: BoxDecoration(
//                   color: Colors.white,
//                   borderRadius: BorderRadius.circular(10),
//                 ),
//                 child: const Center(
//                   child: Icon(
//                     Icons.arrow_back_ios,
//                     color: Colors.black,
//                     size: 25,
//                   ),
//                 ),
//               ),
//             ),
//           ),
//         ]),
//       ),
//       body: Container(
//         color: Colors.white,
//         child: Stack(
//           children: [
//             Center(
//               child: Column(
//                 mainAxisAlignment: MainAxisAlignment.center,
//                 children: [
//                   LayoutBuilder(
//                     builder: (context, constraints) {
//                       final width = (constraints.maxWidth).clamp(.0, 533.0);
//                       final screenSize = Size(width / 1.49, width / 3.4);
//                       return Stack(
//                         children: [
//                           Image.asset(
//                             "assets/casino-slot-machine-vector.jpg",
//                             width: width,
//                             height: 350,
//                           ),
//                           Transform.translate(
//                             offset: Offset(screenSize.width / 3.5,
//                                 screenSize.height * 0.9),
//                             child: Container(
//                               width: screenSize.width,
//                               height: screenSize.height,
//                               child: Row(
//                                 children: List.generate(
//                                   3,
//                                   (index) => Container(
//                                     // decoration: index < 2
//                                     //     ? const BoxDecoration(
//                                     //         border: Border(
//                                     //           right: BorderSide(
//                                     //               color: Colors.grey),
//                                     //         ),
//                                     //       )
//                                     //     : null,
//                                     child: SlotMachineRoller(
//                                       height: screenSize.height,
//                                       width: screenSize.width / 3 - 7,
//                                       itemBuilder: (number) {
//                                         String imagePath;
//                                         if (number <= 6) {
//                                           imagePath = 'assets/slot$number.png';
//                                         } else {
//                                           imagePath = 'assets/slot$number.png';
//                                         }
//                                         return Image.asset(
//                                           imagePath,
//                                           height: screenSize.height,
//                                           width: 40,
//                                           package: number <= 6
//                                               ? 'slot_machine_roller'
//                                               : null,
//                                         );
//                                       },
//                                       target: tempTargets[index],
//                                       delay: Duration(
//                                           milliseconds: 250 * (2 - index)),
//                                       reverse: index & 1 > 0,
//                                     ),
//                                   ),
//                                 ),
//                               ),
//                             ),
//                           )
//                         ],
//                       );
//                     },
//                   ),
//                   const SizedBox(height: 50),
//                   LayoutBuilder(
//                     builder: (context, constraints) {
//                       final width = (constraints.maxWidth).clamp(.0, 533.0);
//                       final size = width / 6;
//                       return Row(
//                         mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//                         children: List.generate(
//                           3,
//                           (i) => Container(
//                             height: 90,
//                             width: 90,
//                             decoration: BoxDecoration(
//                               border: Border.all(
//                                   color: const Color.fromARGB(255, 255, 7, 19)
//                                       .withOpacity(0.5),
//                                   width: 7),
//                             ),
//                             child: imageSelected(targets[i], size),
//                           ),
//                         ),
//                       );
//                     },
//                   ),
//                   const SizedBox(height: 40),
//                 ],
//               ),
//             ),
//             Align(
//               alignment: Alignment.topCenter,
//               child: ConfettiWidget(
//                 confettiController: _confettiController,
//                 blastDirectionality: BlastDirectionality.explosive,
//                 shouldLoop: false,
//                 numberOfParticles: 20,
//                 colors: const [
//                   Colors.red,
//                   Colors.green,
//                   Colors.blue,
//                   Colors.yellow,
//                   Colors.pink,
//                   Colors.orange,
//                   Colors.purple,
//                 ],
//               ),
//             ),
//             Positioned(
//               bottom: 20,
//               left: 25,
//               right: 25,
//               child: ElevatedButton(
//                 onPressed:
//                     (_isRolling || _isConfettiRunning) ? null : _startRolling,
//                 style: ElevatedButton.styleFrom(
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(22),
//                   ),
//                   foregroundColor: Colors.yellow,
//                   minimumSize: const Size(double.infinity, 50),
//                   backgroundColor: Colors.white,
//                 ),
//                 child: Text(
//                   'Start',
//                   style: TextStyle(
//                     color: _isRolling ? Colors.grey : Colors.black,
//                     fontWeight: FontWeight.bold,
//                     fontSize: 20,
//                   ),
//                 ),
//               ),
//             )
//           ],
//         ),
//       ),
//     );
//   }

//   Widget imageSelected(int? number, double size) {
//     if (number == null) {
//       return Icon(Icons.question_mark, size: size);
//     }
//     if (number <= 6) {
//       return Image.asset(
//         'assets/slot$number.png',
//         height: size,
//         width: size,
//         package: 'slot_machine_roller',
//       );
//     } else {
//       return Image.asset(
//         'assets/slot$number.png',
//         height: size,
//         width: size,
//       );
//     }
//   }
// }
